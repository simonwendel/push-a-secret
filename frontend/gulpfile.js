// SPDX-FileCopyrightText: 2022 Simon Wendel
// SPDX-License-Identifier: GPL-3.0-or-later

const CONFIGURATION = {
    program: 'src/Main.elm',
    sources: 'src/**/*.elm',
    tests: 'tests/**/*.elm',
    bundle: 'app.js',

    logo: 'img/logos/logo.png',
    smallLogo: 'img/logos/logo_small.png',

    html: 'index.html',
    less: 'style/**/*.less',
    js: 'js/**/*.js',
    images: 'img/*',

    output: 'dist/'
}

const { src, dest, series, watch } = require('gulp');
const elmbundle = require('gulp-elm');
const less = require('gulp-less');
const concat = require('gulp-concat');
const del = require('del');
const shell = require('gulp-shell');
const rename = require('gulp-rename');
const uglify = require('gulp-uglify');
const CleanCSS = require('clean-css');
const htmlMinify = require('html-minifier');

function clean() {
    return del(CONFIGURATION.output + '**');
}

function logo() {
    return src(CONFIGURATION.logo)
        .pipe(rename('logo.png'))
        .pipe(dest(CONFIGURATION.output))
}

function smallLogo() {
    return src(CONFIGURATION.smallLogo)
        .pipe(rename('logo_small.png'))
        .pipe(dest(CONFIGURATION.output));
}

function js() {
    return src(CONFIGURATION.js)
        .pipe(uglify({
            mangle: true
        }))
        .pipe(dest(CONFIGURATION.output));
}

function html() {
    const options = {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true,
        minifyJS: true
    };

    return src('**/*.html')
        .on('data', function (file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            return file.contents = buferFile
        })
        .pipe(dest(CONFIGURATION.output))
}

function css() {
    const options = {
        compatibility: '*',
        inline: ['all'],
        level: 2
    };

    return src(CONFIGURATION.less)
        .pipe(less())
        .pipe(concat('app.css'))
        .on('data', function (file) {
            const buferFile = new CleanCSS(options).minify(file.contents)
            return file.contents = Buffer.from(buferFile.styles)
        })
        .pipe(dest(CONFIGURATION.output));
}

function elm() {
    return src(CONFIGURATION.program)
        .pipe(elmbundle.bundle(CONFIGURATION.bundle, { optimize: true }))
        .pipe(uglify({
            compress: {
                pure_funcs: [
                    'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9'],
                pure_getters: true,
                keep_fargs: false,
                unsafe_comps: true,
                unsafe: true
            }
        }))
        .pipe(uglify({
            mangle: true
        }))
        .pipe(dest(CONFIGURATION.output));
}

function runTests() {
    return shell.task('elm-test')();
}

function watchTests() {
    return shell.task('elm-test --watch')();
}

const buildTask = series(logo, smallLogo, html, css, js, elm);
exports.build = buildTask;

const testTask = runTests;
exports.test = testTask;

const defaultTask = series(runTests, clean, buildTask)
exports.default = defaultTask;

const watchTask = () => {
    const files = [
        CONFIGURATION.sources,
        CONFIGURATION.tests,
        CONFIGURATION.html,
        CONFIGURATION.less,
        CONFIGURATION.js];
    const settings = { ignoreInitial: false };
    series(
        clean);
    watch(files, settings, buildTask);
    watchTests();
};
exports.watch = watchTask
