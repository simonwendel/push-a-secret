// SPDX-FileCopyrightText: 2022 Simon Wendel
// SPDX-License-Identifier: GPL-3.0-or-later

const buildingForProduction = process.env.ELM_ENVIRONMENT === 'Production';

const CONFIGURATION = {
    sources: 'src/**/*.elm',
    tests: 'tests/**/*.elm',

    entrypoint: 'index.js',
    bundle: 'app.js',

    logo: 'img/logos/logo.png',
    smallLogo: 'img/logos/logo_small.png',

    html: 'index.html',
    less: 'style/**/*.less',
    js: 'js/**/*.js',
    images: 'img/*',

    output: 'dist/'
};

import {
    src as gulp_src, 
    dest as gulp_dest, 
    series as gulp_series, 
    watch as gulp_watch, 
    parallel as gulp_parallel
} from 'gulp';

import less from 'gulp-less';
import concat from 'gulp-concat';
import { deleteAsync } from 'del';
import shell from'gulp-shell';
import rename from 'gulp-rename';
import CleanCSS from 'clean-css';
import minifier from 'html-minifier';
import esbuild from 'gulp-esbuild';
import ElmPlugin from 'esbuild-plugin-elm';

const clean = async () =>
    await deleteAsync(CONFIGURATION.output + '**');

const logo = () =>
    gulp_src(CONFIGURATION.logo, { encoding: false })
        .pipe(rename('logo.png'))
        .pipe(gulp_dest(CONFIGURATION.output));

const responsiveLogo = () =>
    gulp_src(CONFIGURATION.smallLogo, { encoding: false })
        .pipe(rename('logo_small.png'))
        .pipe(gulp_dest(CONFIGURATION.output));

const favicon = () =>
    gulp_src('img/favicon.ico', { encoding: false })
        .pipe(gulp_dest(CONFIGURATION.output));

const scripts = () =>
    gulp_src(CONFIGURATION.entrypoint)
        .pipe(esbuild({
            outfile: CONFIGURATION.bundle,
            bundle: true,
            minify: buildingForProduction,
            treeShaking: buildingForProduction,
            pure: [
                'A2',
                'A3',
                'A4',
                'A5',
                'A6',
                'A7',
                'A8',
                'A9',
                'F2',
                'F3',
                'F3',
                'F4',
                'F5',
                'F6',
                'F7',
                'F8',
                'F9'
            ],
            plugins: [
                ElmPlugin({
                    debug: !buildingForProduction,
                    optimize: buildingForProduction
                })
            ]
        }))
        .pipe(gulp_dest(CONFIGURATION.output));

const html = () =>
    gulp_src(CONFIGURATION.html)
        .on('data', function (file) {
            const options = {
                html5: true,
                includeAutoGeneratedTags: true,
                removeAttributeQuotes: true,
                removeComments: true,
                removeRedundantAttributes: true,
                removeScriptTypeAttributes: true,
                removeStyleLinkTypeAttributes: true,
                sortClassName: true,
                useShortDoctype: true,
                collapseWhitespace: true,
            };

            const buferFile = Buffer.from(minifier.minify(file.contents.toString(), options))
            return file.contents = buferFile
        })
        .pipe(gulp_dest(CONFIGURATION.output));

const css = () =>
    gulp_src(CONFIGURATION.less)
        .pipe(less())
        .pipe(concat('app.css'))
        .on('data', function (file) {
            const options = {
                compatibility: '*',
                inline: ['all'],
                level: 2
            };

            const buffer = new CleanCSS(options).minify(file.contents)
            return file.contents = Buffer.from(buffer.styles)
        })
        .pipe(gulp_dest(CONFIGURATION.output));

const test = () => shell.task('elm-test')();

export {
    clean,
    css,
    html,
    scripts,
    test,
}

const gfx = gulp_parallel(logo, responsiveLogo, favicon);
const all = gulp_parallel(gfx, html, css, scripts);

export {
    gfx,
    all,
}

export let watch = () => {
    const files = [
        CONFIGURATION.sources,
        CONFIGURATION.tests,
        CONFIGURATION.html,
        CONFIGURATION.less,
        CONFIGURATION.js];
    const settings = { ignoreInitial: false };
    clean();
    gulp_watch(files, settings, all);
    shell.task('elm-test --watch');
};

export default gulp_series(test, clean, all);